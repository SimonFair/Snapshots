Title="Edit Snap Schedule"
---
<?php
/* 
 * Copyright 2020 -	Simon Fairweather
 *
 *  Based on original code from Guilherme Jardim and Dan Landon
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */

$plugin = "snapshots";
$docroot = $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp';
$translations = file_exists("$docroot/webGui/include/Translations.php");
require_once "$docroot/plugins/$plugin/include/Legacy.php";
require_once "$docroot/plugins/dynamix.vm.manager/include/libvirt_helpers.php";
?>
<?if (! $translations):?>
<?eval('?>'.parse_file("$docroot/plugins/$plugin/SnapshotSchedule.page"))?>
<?else:?>
<?
require_once("plugins/{$plugin}/include/lib.php");
$setup = true;

$libvirt_up        = $libvirt_running=='yes';
if ($libvirt_up)  $_SESSION['availablevms'] = $lv->get_domains(); else $_SESSION['availablevms'] = array() ;
if (isset($_GET['s'])) {
	$serial = $_GET['s'];
  $seq = $_GET['seq'];
	$width = "50%";
#$subvolsch = get_subvol_schedule($serial);
$subvolsch = get_subvol_schedule_json($serial,$seq);

#	$subvolsch=array() ;
#var_dump(!isset($subvolsch["rund"])) ;
#var_dump($subvolsch) ;
if (!isset($subvolsch["rund"]))  $subvolsch["rund"] = 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday' ;
}


$cfg =  $subvolsch ;
$version = parse_ini_file("/etc/unraid-version");

if (count($_POST)) {
	if ($_POST['#apply'] == "_(Apply)_") {
    $cfg['vmselection'] = "" ;
		array_map(function($k, $v) use (&$cfg) { if($k[0] != "#") $cfg[$k] = $v; }, array_keys($_POST), $_POST );
		snap_manager_log("Updating snapshot settings..."); 
		#set_subvol_schedule($serial, $cfg);
    $seq=set_subvol_schedule_json($serial, $cfg ,$seq);
		snap_manager_log("snapshot settings updated.");
    #reload() ;
    #$subvolsch = get_subvol_schedule($serial);
    $subvolsch = get_subvol_schedule_json($serial,$seq);
    #$subvolsch = $subvolsch[0] ;
	} 
}

$cron = explode(' ',$subvolsch['cron']);
#$cron = explode(' ',"0 * * * *" );
$move = $cron[2]!='*' ? 3 : ($cron[4]!='*' ? 2 : (substr($cron[1],0,1)!='*' ? 1 : 0));
$move = $subvolsch["snapSchedule"] ;
$mode = ['Hourly','Daily','Weekly','Monthly'];
$days = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];
if (!isset($subvolsch['snapscheduleenabled'])) { $subvolsch['snapscheduleenabled'] = "no" ; $setup=false ;} else $setup=true ;

$setup=true ;
?>

<script src="<?autov("/webGui/javascript/jquery.filetree.js")?>"></script>

<script>
$(function(){
  $("#subvolprefix").fileTreeAttach();
  $("#subvolsendto").fileTreeAttach();
});

function path_selected() {
  var share = $("#subvolprefix").val();
  document.getElementById("subvolprefix").value = share;
}
function path_selected2() {
  var share2 = $("#subvolsendto").val();
  document.getElementById("subvolsendto").value = share2;
}

</script>

<script>
<? if ($setup == true):?>
$(function() {
  presetsnap(document.snap_schedule);
  $("#vmselection").dropdownchecklist({ emptyText: 'None', width: 166, explicitClose: '...close' });
    $("#rund").dropdownchecklist({ emptyText: 'None', height:200, width: 166, explicitClose: '...close' });
});
<? endif; ?>
// Fool Unraid by simulating the original input field
function preparesnap(form) {
  var mode = form.snapSchedule.value;
  var min = mode!=0 ? form.min.value : 0;
  var hour = mode!=0 ? form.hour1.value : form.hour2.value;
  form.snapSchedule.options[mode].value = min+' '+hour+' '+form.dotm.value+' * '+form.day.value;
  form.min.disabled = true;
  form.hour1.disabled = true;
  form.hour2.disabled = true;
  form.dotm.disabled = true;
  form.day.disabled = true;
  form.rund.disabled = true;
 }
function presetsnap(form) {
  var mode = form.snapSchedule.value;
  form.min.disabled = false;
  form.day.disabled = mode!=2;
  form.dotm.disabled = mode!=3;
  
  form.day.value = form.day.disabled ? '*' : (form.day.value=='*' ? 0 : form.day.value);
  form.dotm.value = form.dotm.disabled ? '*' : (form.dotm.value=='*' ? 1 : form.dotm.value);
  if (mode==0) {$('#H1').hide(); $('#H2').show();} else {$('#H2').hide(); $('#H1').show();}
}

    

</script>
<form markdown="1" name="snap_schedule" method="POST">
<strong>_(SubVolume)_: </strong><?=$serial;?> 

_(Snap schedule)_:
: <select name="snapscheduleenabled" >
  <?=mk_option($subvolsch['snapscheduleenabled'], "yes", _("Enabled"))?>
  <?=mk_option($subvolsch['snapscheduleenabled'], "no", _("Disabled"))?>
  <?=mk_option($subvolsch['snapscheduleenabled'], "man", _("Manual"))?>
  </select>

:snap_enabled_help:

> Enable or Disable schedule running

<?if ($setup):?>
_(Snap schedule mode)_:
: <select name="snapSchedule" onchange="presetsnap(this.form)">
  <?for ($m=0; $m<count($mode); $m++):?>
  <?=mk_option($move, strval($m), _($mode[$m]))?>
  <?endfor;?>
  </select>

:snap_schedule_help:

> Type of schedule.

_(Day of the week)_:
: <select name="day">
  <?for ($d=0; $d<count($days); $d++):?>
  <?=mk_option($cron[4], strval($d), _($days[$d],0))?>
  <?endfor;?>
  <?=mk_option($subvolsch['day'], "*", "--------", "disabled")?>
  </select>

:snap_day_of_the_week_help:

> Day to run on a weekly schedule.

_(Day of the month)_:
: <select name="dotm">
  <?for ($d=1; $d<=31; $d++):?>
  <?=mk_option($cron[2], strval($d), sprintf("%02d", $d))?>
  <?endfor;?>
  <?=mk_option($subvolsch['dotm'], "*", "--------", "disabled")?>
  </select>

:snap_day_of_the_month_help:

> Day to run on a monthly schedule.

_(Time of the day)_:
: <span id="H1"<?if ($move==0):?> style="display:none"<?endif;?>><select name="hour1" class="narrow">
  <?for ($d=0; $d<=23; $d++):?>
  <?=mk_option($cron[1], strval($d), sprintf("%02d", $d))?>
  <?endfor;?>
  </select>
  <select name="min" class="narrow">
  <?for ($d=0; $d<=55; $d+=5):?>
  <?=mk_option($cron[0], strval($d), sprintf("%02d", $d))?>
  <?endfor;?>
  </select>&nbsp;&nbsp;_(HH:MM)_</span>
: <span id="H2"<?if ($move!=0):?> style="display:none"<?endif;?>><select name="hour2">
  <?=mk_option($cron[1], "*/1", _("Every hour"))?>
  <?=mk_option($cron[1], "*/2", _("Every 2 hours"))?>
  <?=mk_option($cron[1], "*/3", _("Every 3 hours"))?>
  <?=mk_option($cron[1], "*/4", _("Every 4 hours"))?>
  <?=mk_option($cron[1], "*/6", _("Every 6 hours"))?>
  <?=mk_option($cron[1], "*/8", _("Every 8 hours"))?>
  </select></span>

:snap_time_of_the_day_help:

> Time of day to run for Daily.Weekly and Monthly Schedules.

_(Days to run for Hourly and Daily)_:
: <select name="rund[]" id="rund" class="input.description" multiple="multiple" size=10 style="display">
 <?php
	 	$output = $days;
	    
      foreach($output as $item){
		       
      $checked = in_array($item,explode(',',$subvolsch["rund"])) ? " selected" : "";
      echo "<option value='$item'$checked >$item</option>";
}
?>
  <?=mk_option($subvolsch['rund'], "*", "--------", "disabled")?>
  </select>
  

:snap_excluded_days_help:

> For Hourly and Daily schedules to can specify days of the week to run. i.e. Run Daily Mon-Sat and on a Weekly on Sun.

_(Snap Schedule logging)_:
: <select name="snaplogging">
  <?=mk_option($subvolsch['snaplogging'], "yes", _("Enabled"))?>
  <?=mk_option($subvolsch['snaplogging'], "no", _("Disabled"))?>
  </select>
  

:snap_logging_help:

> Switch on and off detailed logging to the Syslog, Start and end processing of the snapping process will be logged when set to no.

_(Snap Schedule Tag)_:

: <input type="text" name="tag"  value="<?=$subvolsch['tag']?>" placeholder="tag name" class="narrow"/>
  
:snap_tag_help:

> Tags allow schedules to be tagged, so only removal actions affect the tag. Without tags deleteoptions cover all snapshots for this subvolume. For a Weekly Schedule you may want to keep 4 occurences, for Daly 7 etc.

_(Snap Send )_:
: <select name="snapsend">
  <?=mk_option($subvolsch['snapsend'], "no", _("Disabled"))?>
  <?=mk_option($subvolsch['snapsend'], "local", _("Local"))?>
  <?=mk_option($subvolsch['snapsend'], "remote", _("Remote"))?>
  <?=mk_option($subvolsch['snapsend'], "both", _("Both"))?>
  </select>
 
:snap_send_help:

> This option defines if snapshots are sent to either another disk, filesystem or a remote machine. The remote location has to be a different BTRFS instance.

 _(Remote Host)_:
: <input type="text" name="remotehost"  value="<?=$subvolsch['remotehost']?>" placeholder="Remote host ip/name" class="narrow"/>

:snap_send_remotehost_help:

> This sets the name or IP address of the remote host.

  _(Snap Send Incremental)_:
: <select name="snapincremental">
  <?=mk_option($subvolsch['snapincremental'], "yes", _("Yes"))?>
  <?=mk_option($subvolsch['snapincremental'], "no", _("No"))?>
  </select>

:snap_send_incremental_help:

> Sends only a incremental file based on the master snap defined.

 _(Master Snap)_:
: <input type="text" name="mastersnap"  value="<?=$subvolsch['mastersnap']?>" placeholder="Previous" class="narrow"/>

:snap_send_master_help:

> Defined the master SNAP, if left to previous will take the last back as the master. This must exist on the remote end.

 Virtual Machine
:   <select id="vmselection"  name="vmselection[]" multiple="multiple" style="display" >
   
      <?php
	 	$output = $_SESSION['availablevms'];
	    
      foreach($output as $item){
		       
      $checked = in_array($item,explode(',',$subvolsch["vmselection"])) ? " selected" : "";
      echo "<option value='$item'$checked >$item</option>";
}
?>
</select> 

:snap_vms_help:

> Selected VMs to action at start and end of snapping.

_(VM options)_:

: <select id="hostshutdown" name="hostoption">
  <?=mk_option($subvolsch['hostoption'], 'disabled', _('Disabled'))?>
  <?=mk_option($subvolsch['hostoption'], 'shutdown', _('Shutdown VMs'))?>
  <?=mk_option($subvolsch['hostoption'], 'hibernate', _('Hibernate VMs'))?>
  <?=mk_option($subvolsch['hostoption'], 'suspend', _('Suspend VMs'))?>
  </select>

:vms_host_shutdown_help:

> Selected action to be taken on running VMs during the snapping process.

_(VM shutdown time-out)_:
: <input type="number" id="vm_shutdown_timeout" name="shutdowntimeout" value="<?=htmlspecialchars($subvolsch["shutdowntimeout"])?>" class="narrow">

:vms_shutdown_timeout_help:

> Time the process will wait for the VMs to complete action before progressing. If VMs reach expected state before the timeout processing will continue.

 _(Retention )_:

: <select name="Removal">
  <?=mk_option($subvolsch['Removal'], "no", _("Disabled"))?>
  <?=mk_option($subvolsch['Removal'], "dry", _("Dry Run"))?>
  <?=mk_option($subvolsch['Removal'], "yes", _("Enabled"))?>
  </select>

:snap_retention_help:

> Sets the mode for retention processing. Dry Run will provide information in the syslog of files that would have been processed. Enabled needs to be set to snapshots to be removed.
> Each of the checks below are processed in order: Days, Occurences and the Percentage. If tag is set will only remove snapshots for that tag.

   _(Days)_:
: <input type="text" name="days"  value="<?=$subvolsch['days']?>" placeholder="Days" class="narrow" />

:snap_retention_days_help:

> Specify the number of days of snapshots to keep.

   _(Occurences)_:
: <input type="text" name="occurences" value="<?=$subvolsch['occurences']?>" placeholder="Number of" class="narrow" />

:snap_retention_occurences_help:

> Specify the number of occurences of snapshots to keep.

   _(Percentage Used)_:
: <input type="text" name="volumeusage" value="<?=$subvolsch['volumeusage']?>" placeholder="Percentage Used" class="narrow" />

:snap_retention_Percentage_help:

> Specify the percentage of the volume, snapshots will be removed until the drive is below the percentage defined.

_(Remove Snaps/Sends )_:
: <select name="snapsendopt">
 <?=mk_option($subvolsch['snapsendopt'], "none", _("None"))?>
  <?=mk_option($subvolsch['snapsendopt'], "local", _("Local"))?>
 
  <?=mk_option($subvolsch['snapsendopt'], "both", _("Both"))?>
  <?=mk_option($subvolsch['snapsendopt'], "remote", _("Remote"))?>
  </select>
&nbsp;_( Function not implemented.)_

:snap_prefix_help:

> Enables remove of sent snapshots to local and remote systems using retention values.

 _(Snapshot Prefix)_:
: <input type="text" name="subvolprefix"  value="<?=$subvolsch['subvolprefix']?>" placeholder="Default" class="narrow"/>

:snap_prefix_help:

> Allows override of subvolume prefix.

 _(Send to location)_:
: <input type="text" name="subvolsendto"  value="<?=$subvolsch['subvolsendto']?>" placeholder="Default" class="narrow"/>

:snap_prefix_help:

> Allows override of subvolume send location.

<?endif;?>
&nbsp;
: <input type="submit" name="#apply" value='_(Apply)_'><input type="button" value="_(Done)_" onclick="done()">
</form>

<?endif;?>