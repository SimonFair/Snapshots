Menu="Snapshots"
Title="BTRFS Volumes"
icon="fa-file"
---
<?PHP
/* Copyright 2020-2020, Simon Fairweather
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
$plugin = "snapshots";
$docroot = $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp';
$translations = file_exists("$docroot/webGui/include/Translations.php");
require_once "$docroot/plugins/$plugin/include/Legacy.php";
?>
<?if (! $translations):?>
<?eval('?>'.parse_file("$docroot/plugins/$plugin/SnapshotBTRFS.page"))?>
<?else:?>
<?
/* read translations */
parse_plugin('snapshots');
global $btrfs_volumes ;
?>
<script type="text/javascript" src="<?autov('/webGui/javascript/jquery.switchbutton.js')?>"></script>
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.ui.css')?>">
<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.switchbutton.css')?>">

<link type="text/css" rel="stylesheet" href="<?autov('/webGui/styles/jquery.filetree.css')?>">
<script src="<?autov('/webGui/javascript/jquery.filetree.js')?>"></script>

#<script type="text/javascript" src="<?autov('/plugins/'.$plugin.'/assets/arrive.min.js')?>"></script>
<style>
table.snapshot{margin-top:0;}

  
table.snapshot tr td:empty {  width: 50px; }
//table.snapshot tr:nth-child(odd) { background-color: #FFF; }
  
//table.snapshot tr td {  padding-top: 10px;   padding-bottom: 10px; }
	table.snapshot thead tr>td{text-align:left;width:8%;white-space:wrap;}
	table.snapshot tr>td{text-align:left;white-space:pre;}
	table.snapshot tr>td+td{text-align:center;}
	table.snapshot tr>td+td+td{text-align:center;}
	table.snapshot tr>td+td+td+td{text-align:center;}
	table.snapshot tr>td+td+td+td+td+td+td{text-align:center;}
	table.snapshot tr>td+td+td+td+td+td+td+td{text-align:center;}
	table.snapshot tr>td+td+td+td+td+td+td+td+td{text-align:left;}
	table.snapshot tr>td+td+td+td+td+td+td+td+td+td+td+td{text-align:center;}

	button.mount {padding:2px 4px 3px 6px;margin:1px 0px 1px 0px;}
	i.partition-hdd{margin:5px; 0px; 0px; 0px;}
	i.hdd{margin:5px; 0px; 0px; 0px;}
	i.share{margin:5px 5px 0px 0px;}
	i.mount-share{margin:5px 5px 0px 0px;}
	i.partition-script{margin-left: 10px; margin-right: 6px;}
	.exec{cursor: pointer;}
	i.fa-append{margin:0px;font-size: 0.8em;position: relative; left:-0.3em;top:0.7em;}
	.underline{text-decoration: underline;}
</style>



<script>
	var SNAPURL		= '/plugins/<?=$plugin;?>/include/snapshots.php';

	if (typeof swal2 === "undefined")
	{
		$('head').append( $('<link rel="stylesheet" type="text/css" />').attr('href', '<?autov("/plugins/${plugin}/assets/sweetalert2.css");?>') );
		$.getScript( '/plugins/<?=$plugin;?>/assets/sweetalert2.js');
	}



$(function(){
$('#sv2').load('/plugins/snapshots/include/snapshots.php',{table:'sv2'});  
$('#sv1').load('/plugins/snapshots/include/snapshots.php',{table:'sv1'});  

      
});

	$("#sv2").arrive("tr",{onceOnly:false},function()
	{
		tr = $(this);

	
		tr.find("span.toggle-snap").click(function(e)
		{
			$(this).disableSelection();disk = $(this).attr("snapvol");el = $(this);
			$(".toggle-"+snapvol).slideToggle(0);
		});
		tr.find( "button[role$=mount]" ).on( "click", function()
		{
			disk_op(this, $(this).attr("role"), $(this).attr("device"));
		});
		tr.find("button[role=format]").click(function(){format_disk(this, $(this).attr("context"), $(this).attr("device"));});
	});


	if (typeof " ".formatUnicorn !== "function")
	{
	  String.prototype.formatUnicorn = String.prototype.formatUnicorn ||
	  function () {
	      "use strict";
	      var str = this.toString();
	      if (arguments.length) {
	          var t = typeof arguments[0];
	          var key;
	          var args = ("string" === t || "number" === t) ?
	              Array.prototype.slice.call(arguments)
	              : arguments[0];

	          for (key in args) {
	              str = str.replace(new RegExp("\\{" + key + "\\}", "gi"), args[key]);
	          }
	      }

	      return str;
	  };
	}

	(function ($) {
		$.fn.getHiddenDimensions = function (includeMargin)
		{
			var $item = this,
			props = { position: 'absolute', visibility: 'hidden', display: 'block' },
			dim = { width: 0, height: 0, innerWidth: 0, innerHeight: 0, outerWidth: 0, outerHeight: 0 },
			$hiddenParents = $item.parents().andSelf().not(':visible'),
			includeMargin = (includeMargin == null) ? false : includeMargin;

			var oldProps = [];
			$hiddenParents.each(function ()
			{
				var old = {};

				for (var name in props)
				{
					old[name] = this.style[name];
					this.style[name] = props[name];
				}

				oldProps.push(old);
			});

			dim.width = $item.width();
			dim.outerWidth = $item.outerWidth(includeMargin);
			dim.innerWidth = $item.innerWidth();
			dim.height = $item.height();
			dim.innerHeight = $item.innerHeight();
			dim.outerHeight = $item.outerHeight(includeMargin);

			$hiddenParents.each(function (i)
			{
				var old = oldProps[i];
				for (var name in props)
				{
					this.style[name] = old[name];
				}
			});

			return dim;
		}
	}(jQuery));

	function OnChangeCheckbox(box)
	{

				$.post(SNAPURL,{'table':"change_ro",'checked':box.checked, 'path':box.value}).done(function(data)
		{


		
		});
	}

		function run_schedule(subvol, slot) {
		/* add spinning and disable button */

	
		$.post(SNAPURL,{'table':'run_schedule', 'subvol':subvol, 'slot':slot}).done(function(data)
		{

		/* $("button[device='"+device+"']").html(" "+(op == "bind" ? "<?=_('Unbind');?>" : "<?=_('attach');?>"));*/
		
		
		});
	}


	function usbip_attach(el, op, device) {
		/* add spinning and disable button */

		
		$("button[hostport='"+device+"']").html("<i class='fa fa-circle-o-notch fa-spin'></i> "+(op == "attach" ? "<?=_('Attaching');?>" : "<?=_('Unbinding');?>"));
		$("button[hostport='"+device+"']").prop("disabled","true"); 

		$.post(SNAPURL,{'action':op,'hostport':device}).done(function(data)
		{

		/* $("button[device='"+device+"']").html(" "+(op == "bind" ? "<?=_('Unbind');?>" : "<?=_('attach');?>"));*/
		
		usb_disks(tab_usbdisks) ;
		});
	}


	function usbip_detach(el, op, port) {
		/* add spinning and disable button */

		
		$("button[port='"+port+"']").html("<i class='fa fa-circle-o-notch fa-spin'></i> "+(op == "detach" ? "<?=_('Detaching');?>" : "<?=_('Unbinding');?>"));
		$("button[port='"+port+"']").prop("disabled","true"); 

		$.post(SNAPURL,{'action':op,'port':port}).done(function(data)
		{

		/* $("button[port='"+port+"']").html(" "+(op == "detach" ? "<?=_('Unbind');?>" : "<?=_('Bind');?>"));*/
		
		usb_disks(tab_usbdisks) ;
		});
	}

	
	function usbip_vm_connect(el, op, device) {
		/* add spinning and disable button */

		
		$("button[vm='"+device+"']").html("<i class='fa fa-circle-o-notch fa-spin'></i> "+(op == "vm_connect" ? "<?=_('Connecting');?>" : "<?=_('Removing');?>"));
		$("button[vm='"+device+"']").prop("disabled","true"); 
        
		$.post(SNAPURL,{'action':op, 'vm_connect':"attach", 'vm':device}).done(function(data)
		{

		 $("button[vm='"+device+"']").html(" "+(op == "vm_detach" ? "<?=_('VM Detact');?>" : "<?=_('VM Attach');?>"));
		
		usb_disks(tab_usbdisks) ;
		});
	}


	function pin_tab(n) {
		$.removeCookie('one',{path:'/'});
		$.cookie('tab','tab'+n,{path:'/'});
	}

	function usb_disks(tabnum)
	{
		/* save table widths */
		if (! diskinfo)
		{
			tableWidths = $("#usbip_devices_list > table > thead > tr").children("td").map(function(i,v){return $(this).getHiddenDimensions().outerWidth;});

			$("#usbip_devices_list > table > thead > tr").children("td").each(function(i,v)
			{
				if (i in tableWidths)
				{
					$(this).css("width", tableWidths[i]);
				}
			});
		}

		var empty = document.getElementById("empty-swt")
		var topo = document.getElementById("topo-swt")
		$.post(SNAPURL,{action:"get_content",display:display, empty:empty.checked, topo:topo.checked},function(data)
		{
			maxWidth = [];
			var toggled = $("tr.toggle-parts").filter(":visible").map(function(){return $(this).attr("name");}).get();
			if (data)
			{
				$('#usbip_devices_list').html(data);

			}
			$.each(toggled, function(k,v)
			{
				if(v.length)
				{
					$("tr[name='"+v+"']").prev().find("i.fa-plus-square").removeClass("fa-plus-square").addClass("fa-minus-square");
					$("tr[name='"+v+"']").css("display", "table-row");
				}
			});
		});
	}

	function ping_poll(tabnum)
	{
		$.post(SNAPURL,{action:"update_ping"});
		setTimeout(ping_poll, 60000, tabnum);
	}

	function refresh_page(tabnum)
	{
		$.post(SNAPURL,{action:"refresh_page"});
		usb_disks(tab_usbdisks);
		setTimeout(refresh_page, 5000, tabnum);
	}

	function detect_usb_disk_change(tabnum) {
		if ($('#tab'+tabnum).is(':checked')) {
			clearTimeout(timers.usbdisks);
			if ( $("tr.toggle-port").find("input[name='portkey']:visible").length )
			{
				timers.usbdisks=setTimeout('detect_usb_disk_change('+tabnum+')',500);
				return false;
			}
			$.post(SNAPURL,{action:"detect"},function(data)
			{
				do_reload = false;
				if (diskinfo && diskinfo !== data.diskinfo)
				{
					do_reload = true;
				}
				if(data.reload)
				{
					do_reload = true;
					$.post(SNAPURL,{action:"remove_hook"});
				}
				diskinfo = data.diskinfo;
				if (do_reload)
				{
					usb_disks(tabnum);
				}
			},"json").always(function()
			{
				timers.usbdisks=setTimeout('detect_usb_disk_change('+tabnum+')',500000);
			});
		} else {
			clearTimeout(timers.usbdisks);
		}
		return false;
	}

	function showInput() {
		$(this).off('click');
		$(this).siblings('input').each(function(){$(this).show();});
		$(this).siblings('input').focus();
		$(this).hide();
	}

	function hideInput() {
		$(this).hide();
		$(this).siblings('span').show();
		$(this).siblings('span').click(showInput);
	}


	function load_hosts(el, action) {
		var target = $(el).parents("div").find("*[name='IP']");
		var old = $(el).html();
		$(el).html("<i class='fa fa-circle-o-notch fa-spin'></i> <?=_('Searching');?>");
		$.post(SNAPURL,{'action': action, 'var': vars, 'network': network, 'workgroup': workgroup}).done(function(data)
		{
			$(el).html(old);
			if (data) {
				var hosts = data.split('\n');
				if (hosts.length) {
					var add = "<select name='IP' class='swal-content__input' required>";
					for(var i = 0;i < hosts.length;i++)
					{
						if (hosts[i].length)
						{
							add += "<option value='"+hosts[i].trim()+"'>"+hosts[i].trim()+"</option>";
						}
					}
					target.replaceWith(add+"</select>")
				} else {
					target.replaceWith("<input type='text' name='IP' class='swal-content__input' autocomplete='off'>");
				}
			}
		});
	}

	function load_shares(el, ip, user, pass, action) {
		var old = $(el).html();
		var target = $(el).parents("div").find("*[name='SHARE']");
		$(el).html("<i class='fa fa-circle-o-notch fa-spin'></i> <?=_('Loading');?>");
		var opts = new Object();
		opts["action"] = action;
		opts["IP"] = ip;
		opts["USER"] = user;
		opts["PASS"] = pass;
		$.post(SNAPURL,opts).done(function(data)
		{
			$(el).html(old);
			if (data != "") {
				var shares = data.split('\n');
				if (shares.length) {
					var add = "<select name='SHARE' class='swal-content__input' required>";
					for(var i = 0;i < shares.length;i++) {
						if (shares[i].length) {
							add += "<option value='"+shares[i]+"'>"+shares[i]+"</option>";
						}
					}
					target.replaceWith(add+"</select>");
				} else {
					target.replaceWith("<input type='text' name='SHARE' class='swal-content__input' autocomplete='off' required>");
				}
			} else {
				target.replaceWith("<input type='text' name='SHARE' class='swal-content__input' autocomplete='off' required>");
			}
		});
	}

	function getVal(el, name) {
		el = $(el).find("*[name="+name+"]");
		return value = ( $(el).attr('type') == 'checkbox' ) ? ($(el).is(':checked') ? "on" : "off") : $(el).val();
	}

	function get_tab_title_by_name(name) {
		var tab		= $("input[name$=tabs] + label").filter(function(){return $(this).text() === name;}).prev();
		var title	= $("div#title > span.left"		).filter(function(){return $(this).text() === name;}).parent();
		if (tab.length) {
			return tab
		} else if (title.length) {
			return title
		} else {
			return $(document)
		}
	}

	function addButtonTab(Button, Name, autoHide, Append)
	{
		if (typeof(autoHide) == "undefined") autoHide = true;
		if (typeof(Append)	 == "undefined") Append	 = true;

		var Target		= get_tab_title_by_name(Name);
		var elementId 	= 'event-' + new Date().getTime() * Math.floor(Math.random()*100000);
		var element	= $("<span id='"+elementId+"' class='status'>"+Button+"</span>");

		if (element.find("input[type='button']").length)
		{
			element.addClass("vhshift");
			element.find("input[type='button']").prop("style","padding-top: 5px; padding-bottom: 5px; margin-top:-3px; margin-bottom:0;");
		}

		if (Target.prop('nodeName') === "DIV")
		{
			element.addClass("vhshift");
			if (Append)
			{
				Target.append(element);
			}
			else
			{
				Target.prepend(element);
			}
		}
		else if (Target.prop('nodeName') === "INPUT")
		{
			element.css("display","none");

			if (Append)
			{
				$('.tabs').append(element);
			}
			else
			{
				$('.tabs').prepend(element);
			}

			Target.bind({click:function()
			{
				$('#'+elementId).fadeIn('slow');}
			});

			if (Target.is(':checked') || ! autoHide) {
				$('#'+elementId).fadeIn('slow');
			}

			$("input[name$=tabs]").each(function()
			{
				if (! $(this).is(Target) && autoHide )
				{
					$(this).bind({click:function()
					{
						$('#'+elementId).fadeOut('slow');}
					});
				}
			});
		}
		else
		{
			return false;
		}
	}

	function swalShowResult(success) {
		opts = (success) ? {title:"<?=_('Success')?>!",icon:"success"} : {title:"<?=_('Fail')?>!",icon:"error"};
		swal2({title:opts.title,icon:opts.icon,text:" ",buttons:{confirm:{visible:false},cancel:{visible:false}},timer:1800});
	}

	function dousbipDevicesSurvey(surveyName, surveyOption) {
		var survey = $("div[data-survey-name="+ surveyName +"]");
		var numQuestions = survey.find("div[data-question]").length;
		var surveyData = new Array
		var index = 0;

		var evalCondition = function(obj, selector){
		if (obj.find(selector).length) {
			evaled = $.trim(obj.find(selector).eq(0).text())
			if (evaled.length ) {
				return eval(evaled);
			}
			return null;
		}
	}

	var getAttr = function(obj, name, defaultValue) {
		return (typeof obj.attr(name) !== "undefined") ? obj.attr(name) : defaultValue;
	}

	

	function showSwal(direction="=") {
		switch(direction) {
			case '>':index++;break;
			case '<':index--;break;
		}
		if(index >= numQuestions){return true;}
		question  = survey.find("div[data-question]").eq(index);
		condition = question.find("div[data-question-condition]").eq(0);

		if (condition.length && ! eval($.trim(condition.text())) ) {
			showSwal(direction);
		}

		content = question.find("div[data-question-content]").html();
		format = question.find("div[data-question-format]");
		if (format.length) { 
			eval("formatOpts = " + $.trim(format.text()));
			content = content.formatUnicorn(formatOpts);
		}

		has_checked = ["checkbox","radio","option"];
		restore_content=$("<div></div>").html(content);
		restore_content.find(":input").each(function(i,v) {
			name = $(this).prop("name");
			if (name in surveyData) {
				if ($.inArray($(this).prop("type"), has_checked) != -1 ) {
					if ( $(this).val() == surveyData[name] ) { 
						$(this).attr("checked",true);
					}
				} else if ($(this).prop("type") == "select-one") {
				$(this).find("option[value="+ surveyData[name] +"]").attr("selected",true);
				} else { 
					$(this).attr("value",surveyData[name]);
				}
			}
		});
		content = restore_content[0].outerHTML;
		button = {back:getAttr(question, "data-question-button-back","<?=_('Back')?>"),cancel:getAttr(question, "data-question-button-cancel","<?=_('Cancel')?>"),
					done:getAttr(question, "data-question-button-done","<?=_('Done')?>"),next:getAttr(question, "data-question-button-next","<?=_('Next')?>")};

		swalOpts = new Object;
		swalOpts.title   = question.attr("data-question-title");
		swalOpts.content = {element:"div",attributes:{innerHTML:content}};
		swalOpts.icon    =  getAttr(question, "data-question-icon","info");
		swalOpts.closeOnClickOutside = false;
		swalOpts.buttons = new Object;
		swalOpts.buttons.confirm = (index > 0) ? {text: button.cancel, value: null,  visible: true, className: "", closeModal: true} : {text: "", value: null, visible: false, className: "", closeModal: true};
		swalOpts.buttons.cancel  = (index > 0) ? {text: button.back,   value: false, visible: true, className: "", closeModal: false} :
											 {text: button.cancel, value: null,  visible: true, className: "", closeModal: true};
		swalOpts.buttons.next    = (index == numQuestions - 1 ) ? {text:button.done, value: true, visible: true, className: "", closeModal: false}:
                                                              {text:button.next, value: true, visible: true, className: "", closeModal: false};
		swal2(swalOpts).then( (response) => {
			emptyInputs = $.grep($(".swal-modal").find(":input"), function (e,v){ e = $(e);
				switch (e.prop('type')) {
					case 'radio': if (e.is(":checked")){surveyData[e.prop("name")] = e.val();}; n=$(":input[name="+e.prop("name")+"]"); return (n.is("[required]") && ! n.is(":checked")); break;
					case 'option':
					case 'checkbox': if(e.is(":checked")){surveyData[e.prop("name")] = e.val()}; return (e.is("[required]") && ! e.is(":checked")); break;
					case 'select-one': if (e.has(":checked")){surveyData[e.prop("name")] = e.find(":checked").val();}; n=$(":input[name="+e.prop("name")+"]"); return (n.is("[required]") && ! n.has(":checked")); break;

					default: if (e.val()||e.prop("name")){surveyData[e.prop("name")] = e.val()}; return (e.is("[required]") && ! e.val()); break;
				}
			});
			if (response)
			{
				if (emptyInputs.length) {
					return "=";
				} else if (! emptyInputs.length && index <= numQuestions - 1) {
					evaled = evalCondition(question, "div[data-question-done]");
					if (index < numQuestions - 1) {
						if (evaled !== null && evaled === true) return ">";
							if (evaled !== null && evaled === false) return "<";
							else return ">";
						} else if(index == numQuestions - 1) {
							if (evaled !== null && evaled === false) return "=";
							$(".swal-button--cancel").prop("disabled",true);
							$(".swal-button--confirm").prop("disabled",true);
							evalCondition(survey,"div[data-survey-done]");
							if (getAttr(survey.find("div[data-survey-done]").eq(0),"data-survey-done-wait", "true") == "false" ) {
								setTimeout(() => { swal2({buttons:{confirm:{visible:false},cancel:{visible:false}},timer:100}) }, 1500)
							}
							return true;
						}
			}
		} else {
			if ( response === false && index <= numQuestions ) {
				return "<";
			} else if ( response === null  ) { 
				return true;
			}
		}
		return "=";
		}).then( (response2) => {
			if (typeof response2 !== "boolean") return showSwal(response2);
				else return false;
		});
	}
	showSwal();
}
</script>

_(Snapshots BTRFS)_

<pre><form id="SnapBTRFS" onsubmit="return false"><table id='sv2' class='disk_status snapshot'><tr><td><div class="spinner"></div></td></tr></table></form></pre><br>


<input type="button" value="_(Done)_" onclick="done()">




<div style="display:none;" data-survey-name="create_subvolume" data-survey-title="<?=_('Create Subvolume');?>">

	<div data-question data-question-title="<?=_('Subvolume Name');?>" data-question-button-done="<?=_('Create');?>">
		<div data-question-format>
			[surveyOption]
		</div>
		<div data-question-content>
			<input type='text' class="swal-content__input" name='subvolume' autocomplete="off" required value={0}><br/>
		</div>
	</div>
	
	<div data-survey-done>
		var opts = new Object();
		opts["table"]   = "create_subvolume";
		
		opts["subvol"]  = surveyData['subvolume'];

		if ( opts.subvol) {
			$.post(SNAPURL,opts).done(function(data)
			{
				
				swalShowResult((data == "true") ? true : false);
			},"json").fail(function(){swalShowResult(false);});
			
			parent.window.location.reload() ;
		}
	</div>
	<div>
		<script type="text/javascript">
			$(function(){
				window.create_subvolume = function(i){dousbipDevicesSurvey("create_subvolume",i);}
			});
		</script>
	</div>
</div>	

	

<div style="display:none;" data-survey-name="delete_subvolume" data-survey-title="<?=_('delete_subvolume');?>">
	<div data-question data-question-title="" data-question-button-done="<?=_('Delete');?>" data-question-icon="warning">
		<div data-question-format>
			[surveyOption]
		</div>
		<div data-question-content>
			<div class="swal-title" style="font-size: 20px;"><?=_('This will delete subvolume');?>:</div>
			<div style="margin-bottom: 15px;margin-top: 15px;">
				<span style="font-weight: bold;">{0}</span>
			</div>
			<div class="swal-title" style="font-size: 20px;">
				<span class="red" style="font-weight: bold;"><?=_('Are you sure');?>?</span>
			</div>
		</div>
		<div data-question-load></div>
		<div data-question-done></div>
	</div>
	<div data-survey-done>
		$.post(SNAPURL,{table:"delete_subvolume",subvol:surveyOption}).done(function(data)
		{
			usb_disks(tab_usbdisks);
			swalShowResult((data == "true") ? true : false);
		},"json").fail(function(){swalShowResult(false);});
		parent.window.location.reload() ;
	</div>
	<div>
		<script type="text/javascript">
			$(function(){
				window.delete_subvolume = function(i){dousbipDevicesSurvey("delete_subvolume",i);}
			});
		</script>
	</div>
</div>

<div style="display:none;" data-survey-name="create_snapshot" data-survey-title="">
	<div data-question data-question-title="<?=_('Create Snapshot');?>" data-question-button-done="<?=_('Create');?>">
		<div data-question-format>
			[surveyOption.subvol,surveyOption.snap, surveyOption.readonly]
		</div>
		<div data-question-content>
			<input type="text" class="swal-content__input" name="snapshot" value={1} placeholder="<?=_('Snap Shot Name');?>" required>
			<p><?=_('Create snapshot Readonly');?>:&nbsp;<input name ="readonly" type="checkbox" checked value="true"> 
			<p><?=_('Subvolume Name');?>:&nbsp;{0}</p>
			
		</div>
		<div data-question-load></div>
		<div data-question-done>
			(surveyData["snapshot"].length)
		</div>
	</div>
	<div data-survey-done data-survey-done-wait="true">
		$.post(SNAPURL, {table:"create_snapshot", subvol:surveyOption.subvol, snapshot:surveyData['snapshot'], readonly:surveyData['readonly']}).done(function(data)
		{
			usb_disks(tab_usbdisks);
			swalShowResult((data == "true") ? true : false);
		},"json").fail(function(){swalShowResult(false);});
		parent.window.location.reload() ;
	</div>
	<div>
		<script type="text/javascript">
			$(function() {
				window.create_snapshot = function(subvol, snap){dousbipDevicesSurvey("create_snapshot",{subvol:subvol,snap:snap});}
			});
		</script>
	</div>
</div>

<div style="display:none;" data-survey-name="send_snapshot" data-survey-title="">
	<div data-question data-question-title="<?=_('Send Snapshot');?>" data-question-button-done="<?=_('Send');?>">
		<div data-question-format>
			[surveyOption.subvol,surveyOption.sendsnap]
		</div>
		<div data-question-content>
			<input type="text" class="swal-content__input" name="sendsnap" value={1} placeholder="<?=_('Send to Snap Shot Name');?>" required>
		<!--	<p><?=_('Send Incremental');?>:&nbsp;<input name ="incremental" type="checkbox"  value="true"> 
			<input type="text" class="swal-content__input" name="sendsnapprev"  placeholder="<?=_('Initial Snapshot');?>" value="{Previous}" >
			<input type='text' name='{1}' placeholder="<?=_('Click to select ISO file');?>" data-pickcloseonfile='true' data-pickfilter='iso' {0}='/mnt/user/isos/' data-pickfolders='true' required='required' class='swal-content__input' autocomplete="off" > -->
			<p><?=_('Subvolume Name');?>:&nbsp;{0}</p>
			
		</div>
		<div data-question-load></div>
		<div data-question-done>
			(surveyData["sendsnap"].length)
		</div>
	</div>
	<div data-survey-done data-survey-done-wait="true">
		$.post(SNAPURL, {table:"send_snapshot", subvol:surveyOption.subvol, snapshot:surveyData['sendsnap']}).done(function(data)
		{
			usb_disks(tab_usbdisks);
			swalShowResult((data == "true") ? true : false);
		},"json").fail(function(){swalShowResult(false);});
		parent.window.location.reload() ;
	</div>
	<div>
		<script type="text/javascript">
			$(function() {
				window.send_snapshot = function(subvol, sendsnap){dousbipDevicesSurvey("send_snapshot",{subvol:subvol,sendsnap:sendsnap});}
			});
		</script>
	</div>
</div>

<div style="display:none;" data-survey-name="send_inc_snapshot" data-survey-title="">
	<div data-question data-question-title="<?=_('Send Snapshot');?>" data-question-button-done="<?=_('Send');?>">
		<div data-question-format>
			[surveyOption.subvol,surveyOption.sendsnap]
		</div>
		<div data-question-content>
			<input type="text" class="swal-content__input" name="sendsnap" value={1} placeholder="<?=_('Send to Snap Shot Name');?>" required>
		<p><?=_('Send Incremental');?>:&nbsp;<input name ="incremental" type="checkbox"  value="true"> 
			<input type="text" class="swal-content__input" name="sendsnapprev"  placeholder="<?=_('Initial Snapshot');?>" value="{Previous}" >
			<input type='text' name='{1}' placeholder="<?=_('Click to select ISO file');?>" data-pickcloseonfile='true' data-pickfilter='iso' {0}='/mnt/user/isos/' data-pickfolders='true' required='required' class='swal-content__input' autocomplete="off" > 
			<p><?=_('Subvolume Name');?>:&nbsp;{0}</p>
			
		</div>
		<div data-question-load></div>
		<div data-question-done>
			(surveyData["sendsnap"].length)
		</div>
	</div>
	<div data-survey-done data-survey-done-wait="true">
		$.post(SNAPURL, {table:"send_snapshot", subvol:surveyOption.subvol, snapshot:surveyData['sendsnap']}).done(function(data)
		{
			usb_disks(tab_usbdisks);
			swalShowResult((data == "true") ? true : false);
		},"json").fail(function(){swalShowResult(false);});
		parent.window.location.reload() ;
	</div>
	<div>
		<script type="text/javascript">
			$(function() {
				window.send_inc_snapshot = function(subvol, sendsnap){dousbipDevicesSurvey("send_inc_snapshot",{subvol:subvol,sendsnap:sendsnap});}
			});
		</script>
	</div>
</div>

<div style="display:none;" data-survey-name="delete_snapshot" data-survey-title="<?=_('delete snapshot');?>">
	<div data-question data-question-title="" data-question-button-done="<?=_('Delete');?>" data-question-icon="warning">
		<div data-question-format>
			[surveyOption]
		</div>
		<div data-question-content>
			<div class="swal-title" style="font-size: 20px;"><?=_('This will delete snapshot');?>:</div>
			<div style="margin-bottom: 15px;margin-top: 15px;">
				<span style="font-weight: bold;">{0}</span>
			</div>
			<div class="swal-title" style="font-size: 20px;">
				<span class="red" style="font-weight: bold;"><?=_('Are you sure');?>?</span>
			</div>
		</div>
		<div data-question-load></div>
		<div data-question-done></div>
	</div>
	<div data-survey-done>
		$.post(SNAPURL,{table:"delete_subvolume",subvol:surveyOption}).done(function(data)
		{
		swalShowResult((data == "true") ? true : false) ;
		},"json").fail(function(){swalShowResult(false);});
        parent.window.location.reload() ;
	</div>
	<div>
		<script type="text/javascript">
			$(function(){
				window.delete_snapshot = function(i){dousbipDevicesSurvey("delete_snapshot",i);}
			
			});
		</script>
	</div>
</div>

<div style="display:none;" data-survey-name="change_mountpoint" data-survey-title="">
	<div data-question data-question-title="<?=_('Change Disk Mount Point');?>" data-question-button-done="<?=_('Change');?>">
		<div data-question-format>
			[surveyOption.mountpoint,surveyOption.disklabel]
		</div>
		<div data-question-content>
			<input type="text" class="swal-content__input" name="MOUNTPOINT" value={0} placeholder="<?=_('Mount Point');?>" required>
			<p><?=_('Disk label');?>:&nbsp;{1}</p>
			<p><?=_('Changing the Mount Point will also change the disk label');?>.</p>
		</div>
		<div data-question-load></div>
		<div data-question-done>
			(surveyData["MOUNTPOINT"].length)
		</div>
	</div>
	<div data-survey-done data-survey-done-wait="true">
		$.post(UDURL, {action:"chg_mountpoint", serial:surveyOption.serial, partition:surveyOption.partition, device:surveyOption.device, fstype:surveyOption.fstype, mountpoint:surveyData['MOUNTPOINT']}).done(function(data)
		{
			swalShowResult((data == "true") ? true : false);
		},"json").fail(function(){swalShowResult(false);});
	</div>
	<div>
		<script type="text/javascript">
			$(function() {
				window.chg_mountpoint = function(serial, partition, device, fstype, mountpoint, disklabel){doUnassignedDevicesSurvey("change_mountpoint",{serial:serial,partition:partition,device:device,fstype:fstype,mountpoint:mountpoint,disklabel:disklabel});}
			});
		</script>
	</div>
</div>


<div style="display: none;">
	<table class='sv1s wide usb_disks'>
		<tbody id="spinner">
		</tbody>
	</table>
</div>


<?endif;?>